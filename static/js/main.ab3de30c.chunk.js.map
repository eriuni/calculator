{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","props","_this","Object","_home_erioni_Desktop_calc_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_erioni_Desktop_calc_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_erioni_Desktop_calc_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","getNumbers","e","num1","target","value","setState","input","state","getResult","result","eval","clear","del","String","slice","react__WEBPACK_IMPORTED_MODULE_5___default","className","type","name","onClick","React","Component"],"mappings":"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","file":"static/js/main.ab3de30c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      input: \"\",\n      result: 0\n    };\n  }\n\n  getNumbers = e => {\n    const num1 = e.target.value;\n\n    this.setState({\n      input: this.state.input + num1\n    });\n  };\n\n  getResult = e => {\n    this.setState({\n      result: eval(this.state.input),\n      input: eval(this.state.input)\n    });\n  };\n\n  clear = e => {\n    this.setState({\n      input: \" \",\n      result: 0\n    });\n  };\n\n  del = e => {\n    this.setState({\n      input: String(this.state.input).slice(0, -1)\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <p className=\"input\">{this.state.input}</p>\n        <p className=\"result\">{this.state.result}</p>\n        <div>\n          <input type=\"button\" value={7} name=\"7\" onClick={this.getNumbers} />\n          <input type=\"button\" value={8} name=\"8\" onClick={this.getNumbers} />\n          <input type=\"button\" value={9} name=\"9\" onClick={this.getNumbers} />\n          <input\n            type=\"button\"\n            value={\"*\"}\n            name=\"her\"\n            onClick={this.getNumbers}\n          />\n        </div>\n        <div>\n          <input type=\"button\" value={4} name=\"4\" onClick={this.getNumbers} />\n          <input type=\"button\" value={5} name=\"5\" onClick={this.getNumbers} />\n          <input type=\"button\" value={6} name=\"6\" onClick={this.getNumbers} />\n          <input\n            type=\"button\"\n            value={\"-\"}\n            name=\"minus\"\n            onClick={this.getNumbers}\n          />\n        </div>\n        <div>\n          <input type=\"button\" value={1} name=\"1\" onClick={this.getNumbers} />\n          <input type=\"button\" value={2} name=\"2\" onClick={this.getNumbers} />\n          <input type=\"button\" value={3} name=\"3\" onClick={this.getNumbers} />\n          <input\n            type=\"button\"\n            value={\"+\"}\n            name=\"plus\"\n            onClick={this.getNumbers}\n          />\n        </div>\n\n        <div>\n          <input type=\"button\" value={\"C\"} name=\"clear\" onClick={this.clear} />\n          <input type=\"button\" value={\"DEL\"} name=\"del\" onClick={this.del} />\n          <input\n            type=\"button\"\n            value={\"=\"}\n            name=\"baraz\"\n            onClick={this.getResult}\n          />\n\n          <input\n            type=\"button\"\n            value={\"/\"}\n            name=\"divide\"\n            onClick={this.getNumbers}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"sourceRoot":""}